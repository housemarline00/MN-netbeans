---Métodos de solución de ecuaciones:
Los métodos de solución de ecuaciones son técnicas o procedimientos utilizados para encontrar las soluciones 
de una ecuación dada. Una ecuación es una igualdad matemática que involucra una o más incógnitas, y su solución 
consiste en encontrar los valores de las incógnitas que hacen que la ecuación sea verdadera.

Existen varios métodos para resolver ecuaciones, y la elección del método adecuado depende de la naturaleza de la 
ecuación y de las herramientas matemáticas disponibles.La elección del método adecuado depende de varios factores, 
como la complejidad de la ecuación, la disponibilidad de herramientas matemáticas y la precisión requerida en la 
solución.



# ---Regla Falsa:
El método de la regla falsa, también conocido como regula falsi o falsa posición, es un método iterativo para
resolver numéricamente ecuaciones no lineales. Este método combina el método de bisección y el método de la secante. 

-----Algoritmo------
Regla_Falsa:
  descripcion: >
    Algoritmo de Regla Falsa para encontrar la raíz de una función.
  pasos:
    - Paso_1: 
        descripcion: Inicializar valores
        acciones:
          - Asignar valores iniciales a a y b (intervalo inicial)
          - Evaluar la función en los extremos del intervalo para obtener f(a) y f(b)
    - Paso_2:
        descripcion: Iteración
        acciones:
          - Calcular el valor de c utilizando la fórmula de interpolación lineal
          - Evaluar la función en c para obtener f(c)
          - Verificar el cambio de signo entre f(a) y f(c), o f(c) y f(b)
          - Actualizar el intervalo [a, b] según el cambio de signo
    - Paso_3:
        descripcion: Condición de convergencia
        acciones:
          - Repetir el Paso_2 hasta que se satisfaga una condición de convergencia (por ejemplo, |b - a| < epsilon)
    - Paso_4:
        descripcion: Retorno del resultado
        acciones:
          - Devolver el valor aproximado de la raíz encontrada (c)
----------------------------------------------------------------------------------------------------------------------------

---IMPLEMENTACIÓN EN JAVA-----
import java.util.Scanner;
import java.util.function.Function;

public class Main { 
    
    public static double reglaFalsa(Function<Double, Double> funcion, double a, double b, double epsilon) {
        double c = 0;
        double fa = funcion.apply(a);
        double fb = funcion.apply(b);
        
        if (fa * fb >= 0) {
            throw new IllegalArgumentException("La función no cambia de signo en el intervalo dado.");
        }
        
        while (Math.abs(b - a) > epsilon) {
            c = (a * fb - b * fa) / (fb - fa);
            double fc = funcion.apply(c);
            
            if (fa * fc < 0) {
                b = c;
                fb = fc;
            } else {
                a = c;
                fa = fc;
            }
        }
        
        return c;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Ingrese la ecuación en términos de 'x', por ejemplo: 'x^3 - 2*x - 5'");
        String ecuacion = scanner.nextLine();
        Function<Double, Double> funcion = x -> evaluarFuncion(ecuacion, x);
        
        System.out.println("Ingrese el extremo izquierdo del intervalo:");
        double a = scanner.nextDouble();
        
        System.out.println("Ingrese el extremo derecho del intervalo:");
        double b = scanner.nextDouble();
        
        System.out.println("Ingrese la tolerancia de error:");
        double epsilon = scanner.nextDouble();
        
        double resultado = reglaFalsa(funcion, a, b, epsilon);
        System.out.println("La raíz aproximada es: " + resultado);
        
        scanner.close();
    }
    
    public static double evaluarFuncion(String ecuacion, double x) {
        // Esta función evalúa la ecuación ingresada en 'x'
        // Aquí puedes implementar tu propio parser para evaluar la ecuación,
        // pero por simplicidad, vamos a usar la biblioteca ScriptEngine de Java
        javax.script.ScriptEngineManager manager = new javax.script.ScriptEngineManager();
        javax.script.ScriptEngine engine = manager.getEngineByName("js");
        try {
            return (double) engine.eval(ecuacion.replace("x", String.valueOf(x)));
        } catch (Exception e) {
            e.printStackTrace();
            return Double.NaN;
        }
    }
}
---------------------------------------------------------------------------------
